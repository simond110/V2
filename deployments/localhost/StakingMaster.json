{
  "address": "0x50D75C1BC6a1cE35002C9f92D0AF4B3684aa6B74",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auroxAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epochStart",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AddToStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimablePoolRewards",
          "type": "uint256"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_claimAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_penaltyAmount",
          "type": "uint256"
        }
      ],
      "name": "CloseStaking",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stakeEndTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "CreateStaking",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "UpdateProviderAddress",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addToStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_investedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakeEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_lastUpdate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_compounded",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_rawInvestedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakeStartTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_providerStake",
              "type": "bool"
            }
          ],
          "internalType": "struct IStakingMaster.RecreateStakeArgs[]",
          "name": "recreateStakeArgs",
          "type": "tuple[]"
        }
      ],
      "name": "batchRecreateStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "closeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "createStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localCreationCount",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRewardsTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_investedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakeEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_lastUpdate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_compounded",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_rawInvestedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakeStartTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_providerStake",
              "type": "bool"
            }
          ],
          "internalType": "struct IStakingMaster.RecreateStakeArgs",
          "name": "recreateStakeArgs",
          "type": "tuple"
        }
      ],
      "name": "recreateStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "returnClaimAmountForEarlyStakeClose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "returnCompoundInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "returnCurrentStakeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_epochOne",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_fromStakingContract",
          "type": "bool"
        }
      ],
      "name": "returnInterestPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "returnSimpleInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "returnStakeState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentStakeValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "compounding",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rawInvestedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeStartTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "returnStakesClaimablePoolRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "returnStakesClaimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "compounding",
          "type": "bool"
        }
      ],
      "name": "returnTotalInterestAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "returnUsersStakes",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "usersStakes",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "returnUsersTotalStakeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "returnValidUsersProviderStake",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_providerAddress",
          "type": "address"
        }
      ],
      "name": "setProviderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "staking",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "investedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "compounded",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rawInvestedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeStartTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "providerStake",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "released",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "poolRewardsClaimed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalLocked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec06ffc0e75b34b93cbc7b7d63e91d5cfe47287198211edea5a03786d1a8ef34",
  "receipt": {
    "to": null,
    "from": "0x959FD7Ef9089B7142B6B908Dc3A8af7Aa8ff0FA1",
    "contractAddress": "0x50D75C1BC6a1cE35002C9f92D0AF4B3684aa6B74",
    "transactionIndex": 0,
    "gasUsed": "2739336",
    "logsBloom": "0x
    "blockHash": "0xac337e5122d72b8080bbdb91f233ed349594a7c5758dad83e9ff5103fefc4464",
    "transactionHash": "0xec06ffc0e75b34b93cbc7b7d63e91d5cfe47287198211edea5a03786d1a8ef34",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xec06ffc0e75b34b93cbc7b7d63e91d5cfe47287198211edea5a03786d1a8ef34",
        "address": "0x50D75C1BC6a1cE35002C9f92D0AF4B3684aa6B74",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000959fd7ef9089b7142b6b908dc3a8af7aa8ff0fa1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xac337e5122d72b8080bbdb91f233ed349594a7c5758dad83e9ff5103fefc4464"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "2739336",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x959FD7Ef9089B7142B6B908Dc3A8af7Aa8ff0FA1",
    1614507973
  ],
  "solcInputHash": "c15570ae541f6bea7258db1a2d1c0cb4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auroxAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochStart\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AddToStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimablePoolRewards\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_penaltyAmount\",\"type\":\"uint256\"}],\"name\":\"CloseStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreateStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"UpdateProviderAddress\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_compounded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rawInvestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_providerStake\",\"type\":\"bool\"}],\"internalType\":\"struct IStakingMaster.RecreateStakeArgs[]\",\"name\":\"recreateStakeArgs\",\"type\":\"tuple[]\"}],\"name\":\"batchRecreateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"closeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"createStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localCreationCount\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_compounded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rawInvestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_providerStake\",\"type\":\"bool\"}],\"internalType\":\"struct IStakingMaster.RecreateStakeArgs\",\"name\":\"recreateStakeArgs\",\"type\":\"tuple\"}],\"name\":\"recreateStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"returnClaimAmountForEarlyStakeClose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"returnCompoundInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"returnCurrentStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_epochOne\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_fromStakingContract\",\"type\":\"bool\"}],\"name\":\"returnInterestPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"returnSimpleInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"returnStakeState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentStakeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"compounding\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rawInvestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"returnStakesClaimablePoolRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"returnStakesClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"compounding\",\"type\":\"bool\"}],\"name\":\"returnTotalInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"returnUsersStakes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"usersStakes\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"returnUsersTotalStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"returnValidUsersProviderStake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"setProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"compounded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rawInvestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"providerStake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"poolRewardsClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToStake(address,uint256)\":{\"details\":\"Adds to a user's pre-existing stake. This can only be triggered by the Provider Contract, i.e; when a user is re-investing their rewards from the Provider Contract.\",\"params\":{\"_amount\":\"The additional amount to stake\",\"_stakingAddress\":\"The address of the stake\"}},\"batchRecreateStake((uint256,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,bool)[])\":{\"details\":\"This function allows the recreation of multiple stakes\",\"params\":{\"recreateStakeArgs\":\"The array of arguments to recreate all the stakes\"}},\"claimRewards(address)\":{\"details\":\"Claim rewards for a given stake. This releases the allowed amount from the Vesting contract and also returns them pool rewards. This can only be called when a stake is complete and by the _recipient of the stake only.\",\"params\":{\"_stakingAddress\":\"The address of the stake\"}},\"closeStake(address)\":{\"details\":\"Close the given stake, this can only happen when a stake is incomplete and User wishes to close the stake early. This function calculates their penalised amount for withdrawing early and stores it in the StakingMaster contract as the pool reward. It then transfers their allowed amount back to the user.\",\"params\":{\"_stakingAddress\":\"The address of the stake\"}},\"createStaking(uint256,uint256,address)\":{\"details\":\"Creates a new stake for the user. It calculates their projected interest based on the parameters and stores it in a TokenVesting contract that vests their total amount over 2 weeks once their stake is complete. It also creates a struct containing all the relevant stake details.\",\"params\":{\"_amount\":\"The amount the user will be staking (in ether)\",\"_duration\":\"The duration of the stake (in months)\",\"_recipient\":\"The address of the user that will be receiving the stake rewards\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recreateStake((uint256,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,bool))\":{\"details\":\"This function allows the migration of a Stake contract from the previous StakingMaster\",\"params\":{\"recreateStakeArgs\":\"All the arguments required to recreate the stake\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"returnCurrentStakeValue(address)\":{\"details\":\"Returns the given stake value corresponding to the stake address\",\"returns\":{\"_0\":\"_stakingAddress The staking address to return the value for\"}},\"returnStakeState(address)\":{\"details\":\"Returns a given stakes state\",\"params\":{\"_stakingAddress\":\"The address of the stake\"},\"returns\":{\"compounding\":\"Whether the stake is compounding\",\"currentStakeValue\":\"The current value of the stake, including interest up until now\",\"interestRate\":\"The interest rate of the stake\",\"lastUpdate\":\"When the stake last had value added to it, or when it was created (if no additional value has been added to the stake)\",\"rawInvestedAmount\":\"The User's invested amount (excluding interest)\",\"stakeEndTime\":\"When the stake will finish\",\"stakeStartTime\":\"When the stake was created\"}},\"returnStakesClaimablePoolRewards(address)\":{\"details\":\"Returns a stakes claimable pool rewards\",\"params\":{\"_stakingAddress\":\"The stake to return the claimable pool rewards for\"},\"returns\":{\"_0\":\"The claimable pool reward amount\"}},\"returnStakesClaimableRewards(address)\":{\"details\":\"Returns a stakes claimable rewards, \",\"params\":{\"_stakingAddress\":\"The stake to return the claimable rewards for\"},\"returns\":{\"_0\":\"The claimable amount\"}},\"returnUsersStakes(address)\":{\"details\":\"Returns a given user's stakes\",\"params\":{\"_user\":\"The user to return stakes for\"},\"returns\":{\"usersStakes\":\"An array containing the addreses of all the user's created stakes\"}},\"returnUsersTotalStakeValue(address)\":{\"details\":\"Returns a given user's total stake value across all the user's stakes, including all interest earnt up until now.\",\"params\":{\"_user\":\"The user to return the value for\"},\"returns\":{\"_0\":\"The users total stake value\"}},\"returnValidUsersProviderStake(address)\":{\"details\":\"Returns a user's staking address if the stake is in progress and was created by the provider contract. Function intended to be called by the provider contract when the user is claiming rewards and intending them to be sent to a Staking contract\",\"params\":{\"_user\":\"The user to return valid stakes for\"},\"returns\":{\"_0\":\"The valid stake address\"}},\"setProviderAddress(address)\":{\"details\":\"Allows the owner to set the provider address for checking if interactions are from the provider. Allow this to be overwritten in case of redeployments\",\"params\":{\"_providerAddress\":\"The contract address of the provider\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingMaster/StakingMaster.sol\":\"StakingMaster\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/StakingMaster/IStakingMaster.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\ninterface IStakingMaster {\\n    /**\\n        @dev The struct containing all of a stakes data\\n     */\\n    struct Staking {\\n        uint256 investedAmount;\\n        uint256 stakeEndTime;\\n        uint256 interestRate;\\n        uint256 lastUpdate;\\n        bool compounded;\\n        // The amount they add in at the start, un-modified\\n        uint256 rawInvestedAmount;\\n        uint256 stakeStartTime;\\n        bool providerStake;\\n        uint256 released;\\n        bool poolRewardsClaimed;\\n        uint256 totalLocked;\\n    }\\n\\n    /**\\n        @dev The struct containing all the fields to recreate a stake\\n     */\\n    struct RecreateStakeArgs {\\n        uint256 _balance;\\n        address _recipient;\\n        uint256 _investedAmount;\\n        uint256 _stakeEndTime;\\n        uint256 _interestRate;\\n        uint256 _lastUpdate;\\n        bool _compounded;\\n        uint256 _rawInvestedAmount;\\n        uint256 _stakeStartTime;\\n        bool _providerStake;\\n    }\\n\\n    /**\\n        @dev Returns a given user's total stake value across all the user's stakes, including all interest earnt up until now.\\n        @param _user The user to return the value for\\n        @return The users total stake value\\n     */\\n    function returnUsersTotalStakeValue(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n        @dev Creates a new stake for the user. It calculates their projected interest based on the parameters and stores it in a TokenVesting contract that vests their total amount over 2 weeks once their stake is complete. It also creates a struct containing all the relevant stake details.\\n        @param _amount The amount the user will be staking (in ether)\\n        @param _duration The duration of the stake (in months)\\n        @param _recipient The address of the user that will be receiving the stake rewards\\n     */\\n    function createStaking(\\n        uint256 _amount,\\n        uint256 _duration,\\n        address _recipient\\n    ) external;\\n\\n    /**\\n        @dev This function allows the migration of a Stake contract from the previous StakingMaster\\n        @param recreateStakeArgs All the arguments required to recreate the stake\\n     */\\n    function recreateStake(RecreateStakeArgs calldata recreateStakeArgs)\\n        external;\\n\\n    /**\\n        @dev This function allows the recreation of multiple stakes\\n        @param recreateStakeArgs The array of arguments to recreate all the stakes\\n     */\\n    function batchRecreateStake(RecreateStakeArgs[] calldata recreateStakeArgs)\\n        external;\\n\\n    /**\\n        @dev Adds to a user's pre-existing stake. This can only be triggered by the Provider Contract, i.e; when a user is re-investing their rewards from the Provider Contract.\\n        @param _stakingAddress The address of the stake\\n        @param _amount The additional amount to stake\\n     */\\n    function addToStake(address _stakingAddress, uint256 _amount) external;\\n\\n    /**\\n        @dev Claim rewards for a given stake. This releases the allowed amount from the Vesting contract and also returns them pool rewards. This can only be called when a stake is complete and by the _recipient of the stake only.\\n        @param _stakingAddress The address of the stake\\n     */\\n    function claimRewards(address _stakingAddress) external;\\n\\n    /**\\n        @dev Close the given stake, this can only happen when a stake is incomplete and User wishes to close the stake early. This function calculates their penalised amount for withdrawing early and stores it in the StakingMaster contract as the pool reward. It then transfers their allowed amount back to the user.\\n        @param _stakingAddress The address of the stake\\n     */\\n    function closeStake(address _stakingAddress) external;\\n\\n    /* Helpers */\\n\\n    /**\\n        @dev Returns a given stakes state\\n        @param _stakingAddress The address of the stake\\n\\n        @return currentStakeValue The current value of the stake, including interest up until now\\n        @return stakeEndTime When the stake will finish\\n        @return interestRate The interest rate of the stake\\n        @return lastUpdate When the stake last had value added to it, or when it was created (if no additional value has been added to the stake)\\n        @return compounding Whether the stake is compounding\\n        @return rawInvestedAmount The User's invested amount (excluding interest)\\n        @return stakeStartTime When the stake was created\\n     */\\n    function returnStakeState(address _stakingAddress)\\n        external\\n        view\\n        returns (\\n            uint256 currentStakeValue,\\n            uint256 stakeEndTime,\\n            uint256 interestRate,\\n            uint256 lastUpdate,\\n            bool compounding,\\n            uint256 rawInvestedAmount,\\n            uint256 stakeStartTime\\n        );\\n\\n    /**\\n        @dev Returns a given user's stakes\\n        @param _user The user to return stakes for\\n\\n        @return usersStakes An array containing the addreses of all the user's created stakes\\n     */\\n    function returnUsersStakes(address _user)\\n        external\\n        view\\n        returns (address[] memory usersStakes);\\n\\n    /**\\n        @dev Returns the given stake value corresponding to the stake address\\n\\n        @return _stakingAddress The staking address to return the value for\\n     */\\n    function returnCurrentStakeValue(address _stakingAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n        @dev Returns a user's staking address if the stake is in progress and was created by the provider contract. Function intended to be called by the provider contract when the user is claiming rewards and intending them to be sent to a Staking contract\\n        @param _user The user to return valid stakes for\\n\\n        @return The valid stake address\\n     */\\n    function returnValidUsersProviderStake(address _user)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n        @dev Returns a stakes claimable rewards, \\n\\n        @param _stakingAddress The stake to return the claimable rewards for\\n\\n        @return The claimable amount\\n     */\\n    function returnStakesClaimableRewards(address _stakingAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n        @dev Returns a stakes claimable pool rewards\\n\\n        @param _stakingAddress The stake to return the claimable pool rewards for\\n\\n        @return The claimable pool reward amount\\n     */\\n    function returnStakesClaimablePoolRewards(address _stakingAddress)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xd5a5f1ab8afe5a2724671159cbc639559870d7f073ba43801a4b5bc7ae03c573\"},\"contracts/StakingMaster/StakingMaster.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IStakingMaster.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// This contract contains a number of time-sensitive actions, it is widely known that time-sensitive actions can be manipulated by the miners reporting of time. This is not believed to be an issue within these contracts because it is dealing only with large time increments (weeks/months) and a miner can only influence the time reporting by ~15 seconds. It is accepted that time dependence events are allowed if they can vary by roughly 15 seconds and still maintain integrity.\\n\\ncontract StakingMaster is IStakingMaster, Context, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private auroxToken;\\n\\n    address private providerAddress;\\n\\n    // Store the static to prevent re-calculation's later on\\n    uint256 private secondsPerMonth = 2629746;\\n\\n    // uint256 private secondsInAFortnight = secondsPerMonth / 2;\\n\\n    // Keep track of the total invested amount\\n    uint256 public investedTotal = 0;\\n\\n    uint256 private epochStart;\\n\\n    // Make this a uint160 so its compatible with the address conversion\\n    uint160 public localCreationCount = 0;\\n\\n    uint256 public poolRewardsTotal = 0;\\n\\n    mapping(address => Staking) public staking;\\n\\n    mapping(address => address[]) private userInvestments;\\n\\n    // If the user accidentally transfers ETH into the contract, revert the transfer\\n    fallback() external payable {\\n        revert();\\n    }\\n\\n    event CreateStaking(\\n        address indexed _from,\\n        address stakeAddress,\\n        uint256 _stakeEndTime,\\n        uint256 _amount\\n    );\\n\\n    event AddToStake(address indexed stakeAddress, uint256 _amount);\\n\\n    event ClaimRewards(\\n        address indexed _from,\\n        address indexed stakeAddress,\\n        uint256 _claimableAmount,\\n        uint256 _claimablePoolRewards\\n    );\\n\\n    event CloseStaking(\\n        address indexed _from,\\n        address stakeAddress,\\n        uint256 _claimAmount,\\n        uint256 _penaltyAmount\\n    );\\n\\n    event UpdateProviderAddress(address indexed _newAddress);\\n\\n    modifier onlyStakeOwner(address _stakingAddress) {\\n        require(\\n            _stakingAddress != address(0x0),\\n            \\\"StakingMaster: Staking address can't be the 0 address\\\"\\n        );\\n\\n        address[] memory usersStakes = userInvestments[_msgSender()];\\n\\n        address foundStake;\\n\\n        for (uint8 index = 0; index < usersStakes.length; index++) {\\n            if (usersStakes[index] == _stakingAddress) {\\n                foundStake = usersStakes[index];\\n            }\\n        }\\n\\n        require(\\n            foundStake != address(0),\\n            \\\"StakingMaster: User doesn't own the stake\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    constructor(address _auroxAddress, uint256 _epochStart) {\\n        auroxToken = IERC20(_auroxAddress);\\n        epochStart = _epochStart;\\n    }\\n\\n    /**\\n        @dev Allows the owner to set the provider address for checking if interactions are from the provider. Allow this to be overwritten in case of redeployments\\n        @param _providerAddress The contract address of the provider\\n     */\\n    function setProviderAddress(address _providerAddress)\\n        external\\n        nonReentrant\\n        onlyOwner\\n    {\\n        providerAddress = _providerAddress;\\n\\n        emit UpdateProviderAddress(_providerAddress);\\n    }\\n\\n    // Function to return a given user's total stake value including all interest earnt up until the current point\\n    function returnUsersTotalStakeValue(address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 totalStakeValue;\\n\\n        address[] memory usersStakes = userInvestments[_user];\\n\\n        for (uint8 index = 0; index < usersStakes.length; index++) {\\n            uint256 currentStakeValue = returnCurrentStakeValue(\\n                usersStakes[index]\\n            );\\n\\n            totalStakeValue = totalStakeValue.add(currentStakeValue);\\n        }\\n\\n        return totalStakeValue;\\n    }\\n\\n    // This function is intended to be called by the provider contract when the provider contract is adding rewards to a stake. It takes in a user's address as a parameter and returns a \\\"valid\\\" stake; a stake that is in progress and was created by the provider previously.\\n    function returnValidUsersProviderStake(address _user)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        address[] memory usersStakes = userInvestments[_user];\\n\\n        for (uint8 index = 0; index < usersStakes.length; index++) {\\n            address currentStake = usersStakes[index];\\n            if (\\n                staking[currentStake].providerStake == true &&\\n                staking[currentStake].stakeEndTime > block.timestamp\\n            ) {\\n                return usersStakes[index];\\n            }\\n        }\\n        // If no valid stakes found\\n        return address(0);\\n    }\\n\\n    // Returns the interest percentage that a user is entitled to, based on the parameters\\n    function returnInterestPercentage(\\n        uint256 _duration,\\n        bool _epochOne,\\n        bool _fromStakingContract\\n    ) public view returns (uint256) {\\n        uint256 interestRate;\\n        uint256 maxInterestRate = uint256(20 ether).div(100);\\n        // Convert the duration into the proper base so the returned interest value has 18 decimals and 1e18 = 100%\\n        uint256 updatedDuration = _duration.mul(uint256(1 ether).div(100));\\n\\n        // Calculate the initial interest rate as the months / 2\\n        interestRate = updatedDuration.div(2);\\n\\n        // If the interest rate exceeds 20% set it to 20%\\n        if (interestRate > maxInterestRate) {\\n            interestRate = maxInterestRate;\\n        }\\n\\n        if (_epochOne && _duration >= 12) {\\n            // If the amount is from epoch 1 then add 50% to the APY\\n            interestRate = interestRate.add(interestRate.div(2));\\n        } else if (_fromStakingContract) {\\n            // If the amount is from the liquidity contract then add 25% to the APY\\n            interestRate = interestRate.add(interestRate.div(4));\\n        }\\n\\n        return interestRate;\\n    }\\n\\n    // Return the simple interest based on the given parameters\\n    function returnSimpleInterest(\\n        uint256 _amount,\\n        uint256 _interest,\\n        uint256 _duration\\n    ) public view returns (uint256) {\\n        // Divide by 1 ether to remove the added decimals from multiplying the interest with 18 decimals by the amount with 18 decimals\\n        return\\n            _amount.add(\\n                _interest\\n                    .mul(_amount)\\n                    .div(1 ether)\\n                    .mul(_duration)\\n                    .div(secondsPerMonth)\\n                    .div(uint256(12))\\n            );\\n    }\\n\\n    // Return the compound interest based on the given parameters\\n    function returnCompoundInterest(\\n        uint256 _amount,\\n        uint256 _interest,\\n        uint256 _duration\\n    ) public view returns (uint256) {\\n        // Store this constant divider value so it doesn't get recomputed each loop\\n        uint256 divider = uint256(1 ether).mul(uint256(12));\\n        // Calculate the compound interest over all complete months\\n        for (uint256 i = 0; i < _duration.div(secondsPerMonth); i++) {\\n            // Calculate the simple interest for the entire year then divide by 12 (The number of times compounding per year)\\n            _amount = _amount.add(_interest.mul(_amount).div(divider));\\n        }\\n\\n        uint256 leftOverMonthSeconds = _duration.mod(secondsPerMonth);\\n        // Calculate the interest for the last left-over month\\n        if (leftOverMonthSeconds > 0) {\\n            // Calculates the interest for the left-over incomplete  month: interest * amount * (leftOverSeconds/secondsPerMonth) / 12\\n            _amount = _amount.add(\\n                _interest\\n                    .mul(_amount)\\n                    .div(1 ether)\\n                    .mul(leftOverMonthSeconds)\\n                    .div(secondsPerMonth)\\n                    .div(uint256(12))\\n            );\\n        }\\n        return _amount;\\n    }\\n\\n    // Function to delegate the call to either a simple interest calculation or compound depending on the compounding parameter\\n    function returnTotalInterestAmount(\\n        uint256 _durationInSeconds,\\n        uint256 _interestRate,\\n        uint256 _amount,\\n        bool compounding\\n    ) public view returns (uint256) {\\n        if (compounding) {\\n            uint256 total = returnCompoundInterest(\\n                _amount,\\n                _interestRate,\\n                _durationInSeconds\\n            );\\n            return total.sub(_amount);\\n        } else {\\n            uint256 total = returnSimpleInterest(\\n                _amount,\\n                _interestRate,\\n                _durationInSeconds\\n            );\\n            return total.sub(_amount);\\n        }\\n    }\\n\\n    // Create a stake for the user given the parameters\\n    function createStaking(\\n        uint256 _amount,\\n        uint256 _duration,\\n        address _recipient\\n    ) external override nonReentrant {\\n        require(_amount > 0, \\\"Amount to create stake must be greater than 0\\\");\\n        require(_duration > 0, \\\"Duration must be longer than 0 months\\\");\\n        require(\\n            _duration <= 84,\\n            \\\"Duration must be less than or equal to 7 years\\\"\\n        );\\n        require(\\n            _recipient != address(0x0),\\n            \\\"Recipient address can't be the 0x0 address\\\"\\n        );\\n\\n        bool _fromProviderContract = false;\\n\\n        // If the sender was the provider contract then give the interest rate boost\\n        if (_msgSender() == providerAddress) {\\n            _fromProviderContract = true;\\n        }\\n\\n        bool _epochOne = false;\\n\\n        // If the current time is within the first epoch and the amount came from the provider contract\\n        if (\\n            block.timestamp <= epochStart.add(14 days) && _fromProviderContract\\n        ) {\\n            _epochOne = true;\\n        }\\n\\n        // The expected interest rate for the user\\n        uint256 interestRate = returnInterestPercentage(\\n            _duration,\\n            _epochOne,\\n            _fromProviderContract\\n        );\\n\\n        bool compounding = true;\\n\\n        // If the duration is less than 12 months then it is not compounding\\n        if (_duration < 12) {\\n            compounding = false;\\n        }\\n\\n        // The entire staking duration in seconds\\n        uint256 durationInSeconds = _duration.mul(secondsPerMonth);\\n        // The total earned interest on the stake\\n        uint256 interest = returnTotalInterestAmount(\\n            durationInSeconds,\\n            interestRate,\\n            _amount,\\n            compounding\\n        );\\n\\n        if (_fromProviderContract == false) {\\n            // Do this in this manner so you don't need to check for math underflows\\n            // Add the interest amount to the public funds balance\\n            uint256 auroxBalance = auroxToken.balanceOf(address(auroxToken));\\n\\n            require(\\n                auroxBalance >= uint256(30000 ether).add(interest),\\n                \\\"Balance of Aurox Token must be greater than 30k\\\"\\n            );\\n        }\\n\\n        uint256 totalLocked = _amount.add(interest);\\n\\n        localCreationCount = localCreationCount + 1;\\n\\n        address vestingContract = address(localCreationCount);\\n\\n        // Increase the overall invested total to include the additional amount + interest\\n        investedTotal = investedTotal.add(totalLocked);\\n\\n        // Transfer the user's investment amount into the vesting contract, or transfer it from the public funds it the creator is the provider contract\\n        if (_fromProviderContract) {\\n            auroxToken.safeTransferFrom(\\n                address(auroxToken),\\n                address(this),\\n                totalLocked\\n            );\\n        } else {\\n            auroxToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n\\n            auroxToken.safeTransferFrom(\\n                address(auroxToken),\\n                address(this),\\n                interest\\n            );\\n        }\\n\\n        uint256 stakeEndTime = block.timestamp.add(durationInSeconds);\\n\\n        // Create the staking master struct to include the additional data\\n        staking[vestingContract] = Staking(\\n            _amount,\\n            stakeEndTime,\\n            interestRate,\\n            block.timestamp,\\n            compounding,\\n            _amount,\\n            block.timestamp,\\n            _fromProviderContract,\\n            0,\\n            false,\\n            totalLocked\\n        );\\n\\n        // Add the created vesting contract to the user's investment mapping\\n        userInvestments[_recipient].push(vestingContract);\\n        // Emit event for creation if required\\n        emit CreateStaking(\\n            _msgSender(),\\n            vestingContract,\\n            stakeEndTime,\\n            _amount\\n        );\\n    }\\n\\n    function saveRecreateStakeDetails(\\n        RecreateStakeArgs calldata recreateStakeArgs\\n    ) private {\\n        investedTotal = investedTotal.add(recreateStakeArgs._balance);\\n\\n        localCreationCount = localCreationCount + 1;\\n\\n        address vestingContract = address(localCreationCount);\\n\\n        staking[vestingContract] = Staking(\\n            recreateStakeArgs._investedAmount,\\n            recreateStakeArgs._stakeEndTime,\\n            recreateStakeArgs._interestRate,\\n            recreateStakeArgs._lastUpdate,\\n            recreateStakeArgs._compounded,\\n            recreateStakeArgs._rawInvestedAmount,\\n            recreateStakeArgs._stakeStartTime,\\n            recreateStakeArgs._providerStake,\\n            0,\\n            false,\\n            recreateStakeArgs._balance\\n        );\\n\\n        userInvestments[recreateStakeArgs._recipient].push(vestingContract);\\n\\n        // Emit event for creation\\n        emit CreateStaking(\\n            _msgSender(),\\n            vestingContract,\\n            recreateStakeArgs._stakeEndTime,\\n            recreateStakeArgs._rawInvestedAmount\\n        );\\n    }\\n\\n    function batchRecreateStake(RecreateStakeArgs[] calldata recreateStakeArgs)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n    {\\n        uint256 transferTotal;\\n\\n        for (uint8 i = 0; i < recreateStakeArgs.length; i++) {\\n            saveRecreateStakeDetails(recreateStakeArgs[i]);\\n            transferTotal += recreateStakeArgs[i]._balance;\\n        }\\n\\n        auroxToken.safeTransferFrom(_msgSender(), address(this), transferTotal);\\n    }\\n\\n    function recreateStake(RecreateStakeArgs calldata recreateStakeArgs)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n    {\\n        saveRecreateStakeDetails(recreateStakeArgs);\\n\\n        auroxToken.safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            recreateStakeArgs._balance\\n        );\\n    }\\n\\n    function addToStake(address _stakingAddress, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require(\\n            _stakingAddress != address(0x0),\\n            \\\"Staking address can't be the 0x0 address\\\"\\n        );\\n        require(\\n            _amount > 0,\\n            \\\"Amount must be greater than 0 when adding to a stake\\\"\\n        );\\n\\n        require(\\n            _msgSender() == providerAddress,\\n            \\\"Only the Provider contract can add to a stake\\\"\\n        );\\n\\n        Staking storage stakingContract = staking[_stakingAddress];\\n\\n        require(\\n            stakingContract.providerStake,\\n            \\\"StakingMaster: To add to a stake it must be a provider stake\\\"\\n        );\\n        require(\\n            stakingContract.stakeEndTime > block.timestamp,\\n            \\\"StakingMaster: Staking contract has finished\\\"\\n        );\\n        // Calculate seconds left in the stake, so that the interest calculation isn't from the start of the stake and is from now\\n        uint256 secondsLeft = stakingContract.stakeEndTime.sub(block.timestamp);\\n\\n        // The expected interest for the additional amount\\n        uint256 interest = returnTotalInterestAmount(\\n            secondsLeft,\\n            stakingContract.interestRate,\\n            _amount,\\n            stakingContract.compounded\\n        );\\n\\n        uint256 totalAddedToLocked = _amount.add(interest);\\n\\n        uint256 timeElapsedSinceLastUpdate = block.timestamp.sub(\\n            stakingContract.lastUpdate\\n        );\\n\\n        // Calculate the earned interest up to now.\\n        uint256 currentInterestAmount = returnTotalInterestAmount(\\n            timeElapsedSinceLastUpdate,\\n            stakingContract.interestRate,\\n            stakingContract.investedAmount,\\n            stakingContract.compounded\\n        );\\n\\n        // Add the new amount to the invested total + the expected interest on that additional amount\\n        investedTotal = investedTotal.add(totalAddedToLocked);\\n\\n        // Update the user's invested amount to include interest up to now + the new amount. This simplifies calculating interest later on.\\n        stakingContract.investedAmount = stakingContract.investedAmount.add(\\n            _amount.add(currentInterestAmount)\\n        );\\n\\n        // Used to calculate the stake value later on\\n        stakingContract.lastUpdate = block.timestamp;\\n        // Add the raw value to the amount\\n        stakingContract.rawInvestedAmount = stakingContract\\n            .rawInvestedAmount\\n            .add(_amount);\\n\\n        stakingContract.totalLocked = stakingContract.totalLocked.add(\\n            totalAddedToLocked\\n        );\\n\\n        auroxToken.safeTransferFrom(\\n            address(auroxToken),\\n            address(this),\\n            totalAddedToLocked\\n        );\\n\\n        emit AddToStake(_stakingAddress, _amount);\\n    }\\n\\n    function returnStakeState(address _stakingAddress)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 currentStakeValue,\\n            uint256 stakeEndTime,\\n            uint256 interestRate,\\n            uint256 lastUpdate,\\n            bool compounding,\\n            uint256 rawInvestedAmount,\\n            uint256 stakeStartTime\\n        )\\n    {\\n        Staking memory stake = staking[_stakingAddress];\\n\\n        // Return the current stake value including interest up until this point\\n        uint256 stakesValue = returnCurrentStakeValue(_stakingAddress);\\n        return (\\n            stakesValue,\\n            stake.stakeEndTime,\\n            stake.interestRate,\\n            stake.lastUpdate,\\n            stake.compounded,\\n            stake.rawInvestedAmount,\\n            stake.stakeStartTime\\n        );\\n    }\\n\\n    // Return all the user's created Staking Contracts\\n    function returnUsersStakes(address _user)\\n        external\\n        view\\n        override\\n        returns (address[] memory usersStakes)\\n    {\\n        return userInvestments[_user];\\n    }\\n\\n    // The alternative to this loop is creating a mapping of indexes and an array of addresses. This allows fetching the stakes index directly without looping. But to enable that you must write and delete an additional time, this increases the gas cost more than this loop.\\n    function removeUsersStake(address stakeToRemove) private {\\n        address[] memory usersStakes = userInvestments[_msgSender()];\\n        uint8 index = 0;\\n        // Interate over each stake to find the matching one\\n        for (uint256 i = 0; i < usersStakes.length; i++) {\\n            if (usersStakes[i] == stakeToRemove) {\\n                index = uint8(i);\\n                break;\\n            }\\n        }\\n        // If the stake is found update the array\\n        if (usersStakes.length > 1) {\\n            userInvestments[_msgSender()][index] = usersStakes[\\n                usersStakes.length - 1\\n            ];\\n        }\\n        // Remove last item\\n        userInvestments[_msgSender()].pop();\\n    }\\n\\n    // Function to return the staked value including all generated interest up until the now\\n    function returnCurrentStakeValue(address _stakingAddress)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        Staking memory stake = staking[_stakingAddress];\\n        uint256 timeElapsedSinceLastUpdate;\\n\\n        // If the stake is complete\\n        if (stake.stakeEndTime < block.timestamp) {\\n            timeElapsedSinceLastUpdate = stake.stakeEndTime.sub(\\n                stake.lastUpdate\\n            );\\n        } else {\\n            timeElapsedSinceLastUpdate = block.timestamp.sub(stake.lastUpdate);\\n        }\\n\\n        uint256 interest = returnTotalInterestAmount(\\n            timeElapsedSinceLastUpdate,\\n            stake.interestRate,\\n            stake.investedAmount,\\n            stake.compounded\\n        );\\n\\n        return stake.investedAmount.add(interest);\\n    }\\n\\n    function returnStakesClaimablePoolRewards(address _stakingAddress)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        Staking memory stakingContract = staking[_stakingAddress];\\n\\n        // If the user has claimed pool rewards before\\n        if (stakingContract.poolRewardsClaimed) {\\n            return 0;\\n        }\\n\\n        // The user's share of the pool rewards\\n        return\\n            poolRewardsTotal.mul(stakingContract.totalLocked).div(\\n                investedTotal\\n            );\\n    }\\n\\n    // This function returns a user's total claimable reward amount for any given time\\n    function returnStakesClaimableRewards(address _stakingAddress)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        Staking memory stakingContract = staking[_stakingAddress];\\n\\n        // If the vesting hasn't started yet, vesting starts when the stake completes\\n        if (stakingContract.stakeEndTime > block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 vestingDuration = secondsPerMonth.div(2);\\n\\n        uint256 vestingEndTime = stakingContract.stakeEndTime.add(\\n            vestingDuration\\n        );\\n\\n        // If the vesting duration is complete return the amount - the amount that has been already released\\n        if (block.timestamp >= vestingEndTime) {\\n            return stakingContract.totalLocked.sub(stakingContract.released);\\n        }\\n\\n        return\\n            (\\n                (\\n                    stakingContract.totalLocked.mul(\\n                        (block.timestamp.sub(stakingContract.stakeEndTime))\\n                    )\\n                ).div(vestingDuration)\\n            ).sub(stakingContract.released);\\n    }\\n\\n    // Function to claim rewards for a user, it releases the funds from the Vesting contract and calculates the user's share of the pool rewards\\n    function claimRewards(address _stakingAddress)\\n        external\\n        override\\n        nonReentrant\\n        onlyStakeOwner(_stakingAddress)\\n    {\\n        Staking storage stakingContract = staking[_stakingAddress];\\n\\n        require(\\n            stakingContract.stakeEndTime < block.timestamp,\\n            \\\"StakingMaster: Stake is still in progress\\\"\\n        );\\n\\n        uint256 claimablePoolRewards = 0;\\n\\n        if (!stakingContract.poolRewardsClaimed) {\\n            // Pool rewards calculation here\\n            claimablePoolRewards = returnStakesClaimablePoolRewards(\\n                _stakingAddress\\n            );\\n\\n            stakingContract.poolRewardsClaimed = true;\\n\\n            // Remove the user's amount from the investedTotal and from the poolRewardsTotal\\n            investedTotal = investedTotal.sub(stakingContract.totalLocked);\\n\\n            poolRewardsTotal = poolRewardsTotal.sub(claimablePoolRewards);\\n        }\\n\\n        uint256 claimableAmount = returnStakesClaimableRewards(_stakingAddress);\\n\\n        stakingContract.released = stakingContract.released.add(\\n            claimableAmount\\n        );\\n\\n        // If the user doesn't have additional rewards to claim from the vesting contract, delete it from the array and delete the struct\\n        if (stakingContract.released == stakingContract.totalLocked) {\\n            removeUsersStake(_stakingAddress);\\n            // Delete the struct item\\n            delete staking[_stakingAddress];\\n        }\\n\\n        auroxToken.safeTransfer(_msgSender(), claimableAmount);\\n        if (!stakingContract.poolRewardsClaimed && claimablePoolRewards > 0) {\\n            auroxToken.safeTransfer(_msgSender(), claimablePoolRewards);\\n        }\\n\\n        emit ClaimRewards(\\n            _msgSender(),\\n            _stakingAddress,\\n            claimableAmount,\\n            claimablePoolRewards\\n        );\\n    }\\n\\n    // This function calculates how much the user is entitled to when a stake is closed early\\n    function returnClaimAmountForEarlyStakeClose(address _stakingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Staking memory stake = staking[_stakingAddress];\\n\\n        uint256 incompleteStakeTime = stake.stakeEndTime.sub(block.timestamp);\\n\\n        uint256 stakeTotalTime = stake.stakeEndTime.sub(stake.stakeStartTime);\\n\\n        uint256 penaltyTotal = stake\\n            .rawInvestedAmount\\n            .mul(incompleteStakeTime)\\n            .div(stakeTotalTime)\\n            .div(2);\\n\\n        // Return the raw amount and subtract the penalty total\\n        return stake.rawInvestedAmount.sub(penaltyTotal);\\n    }\\n\\n    // Close the staking contract with penalties\\n    function closeStake(address _stakingAddress)\\n        external\\n        override\\n        nonReentrant\\n        onlyStakeOwner(_stakingAddress)\\n    {\\n        Staking storage stakingContract = staking[_stakingAddress];\\n        // Require that the staking contract hasn't ended\\n        require(\\n            stakingContract.stakeEndTime > block.timestamp,\\n            \\\"Staking contract has finished\\\"\\n        );\\n\\n        investedTotal = investedTotal.sub(stakingContract.totalLocked);\\n\\n        // Calculate what the user is owed\\n        uint256 claimAmount = returnClaimAmountForEarlyStakeClose(\\n            _stakingAddress\\n        );\\n\\n        uint256 penaltyAmount = stakingContract.totalLocked.sub(claimAmount);\\n\\n        poolRewardsTotal = poolRewardsTotal.add(penaltyAmount);\\n\\n        removeUsersStake(_stakingAddress);\\n        // Delete the item from the array\\n        delete staking[_stakingAddress];\\n\\n        // Transfer the amount the user is owed\\n        auroxToken.safeTransfer(_msgSender(), claimAmount);\\n\\n        emit CloseStaking(\\n            _msgSender(),\\n            _stakingAddress,\\n            claimAmount,\\n            penaltyAmount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x73aa533b3a4fedc37094421965b31186ee490500817fdd4d9fe6d2165a8dc522\"}},\"version\":1}",
  "bytecode": "0x60806040526228207260045560006005819055600780546001600160a01b03191690556008553480156200003257600080fd5b5060405162002f8338038062002f838339810160408190526200005591620000de565b62000060336200008e565b60018055600280546001600160a01b0319166001600160a01b0393909316929092179091556006556200011a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000f257600080fd5b82516001600160a01b03811681146200010a57600080fd5b6020939093015192949293505050565b612e59806200012a6000396000f3fe6080604052600436106101815760003560e01c8063b0baa5ab116100d1578063e0c6920a1161008a578063ee7954a611610064578063ee7954a61461054b578063ef5cfb8c1461056b578063f2fde38b1461058b578063faf7756d146105ab57600080fd5b8063e0c6920a146104f5578063e7fe0c7b14610515578063ec19e2d51461052b57600080fd5b8063b0baa5ab14610349578063bb98a6bb14610369578063c3ad51c314610389578063ca20da34146103a9578063d764b78f14610400578063dc5d7fc5146104d557600080fd5b806386feef801161013e57806393a3d6de1161011857806393a3d6de146102bc5780639876e0f3146102dc5780639d878cc2146102fc578063a43b0c8d1461032957600080fd5b806386feef801461025e5780638bd404691461027e5780638da5cb5b1461029e57600080fd5b806305640cee146101865780630b30de6f146101b9578063162214c1146101d95780635e7dc7c114610211578063715018a614610227578063781749301461023e575b600080fd5b34801561019257600080fd5b506101a66101a13660046128e8565b6105cb565b6040519081526020015b60405180910390f35b3480156101c557600080fd5b506101a66101d4366004612930565b610694565b3480156101e557600080fd5b506007546101f9906001600160a01b031681565b6040516001600160a01b0390911681526020016101b0565b34801561021d57600080fd5b506101a660055481565b34801561023357600080fd5b5061023c6107a1565b005b34801561024a57600080fd5b506101a6610259366004612930565b6107e0565b34801561026a57600080fd5b506101a6610279366004612959565b6108ea565b34801561028a57600080fd5b5061023c610299366004612930565b610928565b3480156102aa57600080fd5b506000546001600160a01b03166101f9565b3480156102c857600080fd5b506101f96102d7366004612930565b610c23565b3480156102e857600080fd5b506101a66102f73660046128e8565b610d5a565b34801561030857600080fd5b5061031c610317366004612930565b610d94565b6040516101b0919061299a565b34801561033557600080fd5b5061023c6103443660046129e7565b610e0a565b34801561035557600080fd5b506101a6610364366004612930565b6111b7565b34801561037557600080fd5b5061023c610384366004612a11565b611289565b34801561039557600080fd5b506101a66103a4366004612a87565b61136d565b3480156103b557600080fd5b506103c96103c4366004612930565b611412565b6040805197885260208801969096529486019390935260608501919091521515608084015260a083015260c082015260e0016101b0565b34801561040c57600080fd5b5061047e61041b366004612930565b600960208190526000918252604090912080546001820154600283015460038401546004850154600586015460068701546007880154600889015499890154600a90990154979996989597949660ff94851696939592949182169390929116908b565b604080519b8c5260208c019a909a52988a01979097526060890195909552921515608088015260a087019190915260c0860152151560e08501526101008401521515610120830152610140820152610160016101b0565b3480156104e157600080fd5b5061023c6104f0366004612930565b611502565b34801561050157600080fd5b5061023c610510366004612ac9565b6115a2565b34801561052157600080fd5b506101a660085481565b34801561053757600080fd5b506101a6610546366004612930565b611b99565b34801561055757600080fd5b506101a6610566366004612930565b611c6d565b34801561057757600080fd5b5061023c610586366004612930565b611da2565b34801561059757600080fd5b5061023c6105a6366004612930565b6120fe565b3480156105b757600080fd5b5061023c6105c6366004612afe565b612199565b6000806105e1670de0b6b3a7640000600c612214565b905060005b6004546105f4908590612220565b81101561062d576106196106128361060c888a612214565b90612220565b879061222c565b95508061062581612b2d565b9150506105e6565b5060006106456004548561223890919063ffffffff16565b9050801561068757610684610612600c61060c60045461060c8661067e670de0b6b3a764000061060c8f8f61221490919063ffffffff16565b90612214565b95505b85925050505b9392505050565b6001600160a01b038116600090815260096020818152604080842081516101608101835281548152600182015493810184905260028201549281019290925260038101546060830152600481015460ff90811615156080840152600582015460a0840152600682015460c084015260078201548116151560e08401526008820154610100840152938101549093161515610120820152600a9092015461014083015282906107429042612244565b905060006107618360c00151846020015161224490919063ffffffff16565b90506000610785600261060c8461060c878960a0015161221490919063ffffffff16565b60a08501519091506107979082612244565b9695505050505050565b6000546001600160a01b031633146107d45760405162461bcd60e51b81526004016107cb90612b48565b60405180910390fd5b6107de6000612250565b565b6001600160a01b038116600090815260096020818152604080842081516101608101835281548152600182015493810184905260028201549281019290925260038101546060830152600481015460ff90811615156080840152600582015460a0840152600682015460c084015260078201548116151560e08401526008820154610100840152938101549093161515610120820152600a9092015461014083015282904211156108a5576060820151602083015161089e91612244565b90506108b8565b60608201516108b5904290612244565b90505b60006108d2828460400151856000015186608001516108ea565b83519091506108e1908261222c565b95945050505050565b600081156109135760006108ff8486886105cb565b905061090b8185612244565b915050610920565b60006108ff848688610d5a565b949350505050565b6002600154141561094b5760405162461bcd60e51b81526004016107cb90612b7d565b6002600155806001600160a01b0381166109775760405162461bcd60e51b81526004016107cb90612bb4565b336000908152600a60209081526040808320805482518185028101850190935280835291929091908301828280156109d857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109ba575b50505050509050600080600090505b82518160ff161015610a5b57836001600160a01b0316838260ff1681518110610a1257610a12612c09565b60200260200101516001600160a01b03161415610a4957828160ff1681518110610a3e57610a3e612c09565b602002602001015191505b80610a5381612c1f565b9150506109e7565b506001600160a01b038116610a825760405162461bcd60e51b81526004016107cb90612c3f565b6001600160a01b038416600090815260096020526040902060018101544210610aed5760405162461bcd60e51b815260206004820152601d60248201527f5374616b696e6720636f6e7472616374206861732066696e697368656400000060448201526064016107cb565b600a810154600554610afe91612244565b6005556000610b0c86610694565b90506000610b278284600a015461224490919063ffffffff16565b600854909150610b37908261222c565b600855610b43876122a0565b6001600160a01b0387166000908152600960208190526040822082815560018101839055600281018390556003810183905560048101805460ff19908116909155600582018490556006820184905560078201805482169055600882018490559181018054909216909155600a0155610bca335b6002546001600160a01b03169084612447565b604080516001600160a01b038916815260208101849052808201839052905133917f8e37b197e6246ce3e910cc68fb082bc41de16c6b0c96b3f55e067ec4987ba86c919081900360600190a25050600180555050505050565b6001600160a01b0381166000908152600a6020908152604080832080548251818502810185019093528083528493830182828015610c8a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c6c575b5050505050905060005b81518160ff161015610d50576000828260ff1681518110610cb757610cb7612c09565b6020908102919091018101516001600160a01b0381166000908152600990925260409091206007015490915060ff1615156001148015610d1157506001600160a01b03811660009081526009602052604090206001015442105b15610d3d57828260ff1681518110610d2b57610d2b612c09565b60200260200101519350505050919050565b5080610d4881612c1f565b915050610c94565b5060009392505050565b6000610920610d8d600c61060c60045461060c8761067e670de0b6b3a764000061060c8d8d61221490919063ffffffff16565b859061222c565b6001600160a01b0381166000908152600a6020908152604091829020805483518184028101840190945280845260609392830182828015610dfe57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610de0575b50505050509050919050565b60026001541415610e2d5760405162461bcd60e51b81526004016107cb90612b7d565b60026001556001600160a01b038216610e995760405162461bcd60e51b815260206004820152602860248201527f5374616b696e6720616464726573732063616e27742062652074686520307830604482015267206164647265737360c01b60648201526084016107cb565b60008111610f065760405162461bcd60e51b815260206004820152603460248201527f416d6f756e74206d7573742062652067726561746572207468616e2030207768604482015273656e20616464696e6720746f2061207374616b6560601b60648201526084016107cb565b6003546001600160a01b0316336001600160a01b031614610f7f5760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79207468652050726f766964657220636f6e74726163742063616e206160448201526c646420746f2061207374616b6560981b60648201526084016107cb565b6001600160a01b0382166000908152600960205260409020600781015460ff166110115760405162461bcd60e51b815260206004820152603c60248201527f5374616b696e674d61737465723a20546f2061646420746f2061207374616b6560448201527f206974206d75737420626520612070726f7669646572207374616b650000000060648201526084016107cb565b428160010154116110795760405162461bcd60e51b815260206004820152602c60248201527f5374616b696e674d61737465723a205374616b696e6720636f6e74726163742060448201526b1a185cc8199a5b9a5cda195960a21b60648201526084016107cb565b600181015460009061108b9042612244565b600283015460048401549192506000916110ab918491879060ff166108ea565b905060006110b9858361222c565b905060006110d485600301544261224490919063ffffffff16565b6002860154865460048801549293506000926110f6928592909160ff166108ea565b600554909150611106908461222c565b60055561111e611116888361222c565b87549061222c565b86554260038701556005860154611135908861222c565b6005870155600a860154611149908461222c565b600a870155600254611166906001600160a01b03168030866124af565b876001600160a01b03167f7c73100c416683062f141e6567d8fc8b0caa0ba403401a6efa9f826c3d932571886040516111a191815260200190565b60405180910390a2505060018055505050505050565b6001600160a01b03811660009081526009602081815260408084208151610160810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460ff90811615156080840152600582015460a0840152600682015460c084015260078201548116151560e0840152600882015461010084015292810154909216158015610120830152600a90920154610140820152906112695750600092915050565b61068d60055461060c83610140015160085461221490919063ffffffff16565b600260015414156112ac5760405162461bcd60e51b81526004016107cb90612b7d565b60026001556000546001600160a01b031633146112db5760405162461bcd60e51b81526004016107cb90612b48565b6000805b60ff811683111561134b5761130e84848360ff1681811061130257611302612c09565b905061014002016124ed565b83838260ff1681811061132357611323612c09565b611337926101409091020135905083612c88565b91508061134381612c1f565b9150506112df565b50611364336002546001600160a01b03169030846124af565b50506001805550565b600080806113856801158e460913d000006064612220565b905060006113a661139f670de0b6b3a76400006064612220565b8890612214565b90506113b3816002612220565b9250818311156113c1578192505b8580156113cf5750600c8710155b156113f0576113e96113e2846002612220565b849061222c565b9250611407565b8415611407576114046113e2846004612220565b92505b509095945050505050565b6001600160a01b03811660009081526009602081815260408084208151610160810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460ff90811615156080840152600582015460a0840152600682015460c084015260078201548116151560e08401526008820154610100840152928101549092161515610120820152600a90910154610140820152819081908190819081908190816114cb8a6107e0565b602083015160408401516060850151608086015160a087015160c090970151949f939e50919c509a50985092965094509092505050565b600260015414156115255760405162461bcd60e51b81526004016107cb90612b7d565b60026001556000546001600160a01b031633146115545760405162461bcd60e51b81526004016107cb90612b48565b600380546001600160a01b0319166001600160a01b0383169081179091556040517ffa6622d5336da40f5b585dfbfbbad2d27baa4fae4ca530a052dab29bc96d079890600090a25060018055565b600260015414156115c55760405162461bcd60e51b81526004016107cb90612b7d565b60026001558261162d5760405162461bcd60e51b815260206004820152602d60248201527f416d6f756e7420746f20637265617465207374616b65206d757374206265206760448201526c0726561746572207468616e203609c1b60648201526084016107cb565b6000821161168b5760405162461bcd60e51b815260206004820152602560248201527f4475726174696f6e206d757374206265206c6f6e676572207468616e2030206d6044820152646f6e74687360d81b60648201526084016107cb565b60548211156116f35760405162461bcd60e51b815260206004820152602e60248201527f4475726174696f6e206d757374206265206c657373207468616e206f7220657160448201526d75616c20746f203720796561727360901b60648201526084016107cb565b6001600160a01b03811661175c5760405162461bcd60e51b815260206004820152602a60248201527f526563697069656e7420616464726573732063616e27742062652074686520306044820152697830206164647265737360b01b60648201526084016107cb565b6003546000906001600160a01b0316336001600160a01b0316141561177f575060015b600654600090611792906212750061222c565b421115801561179e5750815b156117a7575060015b60006117b485838561136d565b90506001600c8610156117c5575060005b60006117dc6004548861221490919063ffffffff16565b905060006117ec82858b866108ea565b9050856118e1576002546040516370a0823160e01b81526001600160a01b03909116600482018190526000916370a0823190602401602060405180830381865afa15801561183e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118629190612ca0565b905061187869065a4da25d3016c000008361222c565b8110156118df5760405162461bcd60e51b815260206004820152602f60248201527f42616c616e6365206f66204175726f7820546f6b656e206d757374206265206760448201526e726561746572207468616e2033306b60881b60648201526084016107cb565b505b60006118ed8a8361222c565b600754909150611907906001600160a01b03166001612cb9565b600780546001600160a01b0319166001600160a01b03929092169182179055600554611933908361222c565b600555871561195957600254611954906001600160a01b03168030856124af565b611989565b611971336002546001600160a01b031690308e6124af565b600254611989906001600160a01b03168030866124af565b6000611995428661222c565b90506040518061016001604052808d815260200182815260200188815260200142815260200187151581526020018d81526020014281526020018a15158152602001600081526020016000151581526020018481525060096000846001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555061010082015181600801556101208201518160090160006101000a81548160ff02191690831515021790555061014082015181600a0155905050600a60008b6001600160a01b03166001600160a01b03168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b03160217905550611b393390565b604080516001600160a01b038581168252602082018590529181018f90529116907fddd28da244a5f28bba9c56c573a5a3180278e2bb4b66b47bc9a14516b92d8ba39060600160405180910390a250506001805550505050505050505050565b6001600160a01b0381166000908152600a60209081526040808320805482518185028101850190935280835284938493929190830182828015611c0557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611be7575b5050505050905060005b81518160ff161015611c64576000611c42838360ff1681518110611c3557611c35612c09565b60200260200101516107e0565b9050611c4e848261222c565b9350508080611c5c90612c1f565b915050611c0f565b50909392505050565b6001600160a01b038116600090815260096020818152604080842081516101608101835281548152600182015493810184905260028201549281019290925260038101546060830152600481015460ff90811615156080840152600582015460a0840152600682015460c084015260078201548116151560e08401526008820154610100840152938101549093161515610120820152600a90920154610140830152421015611d1f5750600092915050565b600454600090611d30906002612220565b90506000611d4b82846020015161222c90919063ffffffff16565b9050804210611d69576101008301516101408401516108e191612244565b6108e1836101000151611d9c8461060c611d9088602001514261224490919063ffffffff16565b61014089015190612214565b90612244565b60026001541415611dc55760405162461bcd60e51b81526004016107cb90612b7d565b6002600155806001600160a01b038116611df15760405162461bcd60e51b81526004016107cb90612bb4565b336000908152600a6020908152604080832080548251818502810185019093528083529192909190830182828015611e5257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e34575b50505050509050600080600090505b82518160ff161015611ed557836001600160a01b0316838260ff1681518110611e8c57611e8c612c09565b60200260200101516001600160a01b03161415611ec357828160ff1681518110611eb857611eb8612c09565b602002602001015191505b80611ecd81612c1f565b915050611e61565b506001600160a01b038116611efc5760405162461bcd60e51b81526004016107cb90612c3f565b6001600160a01b038416600090815260096020526040902060018101544211611f795760405162461bcd60e51b815260206004820152602960248201527f5374616b696e674d61737465723a205374616b65206973207374696c6c20696e6044820152682070726f677265737360b81b60648201526084016107cb565b600981015460009060ff16611fc957611f91866111b7565b60098301805460ff19166001179055600a830154600554919250611fb59190612244565b600555600854611fc59082612244565b6008555b6000611fd487611c6d565b6008840154909150611fe6908261222c565b60088401819055600a840154141561207157612001876122a0565b6001600160a01b0387166000908152600960208190526040822082815560018101839055600281018390556003810183905560048101805460ff19908116909155600582018490556006820184905560078201805482169055600882018490559181018054909216909155600a01555b612088336002546001600160a01b03169083612447565b600983015460ff1615801561209d5750600082115b156120ab576120ab33610bb7565b60408051828152602081018490526001600160a01b0389169133917f5edbb4c958d6c6218724840db450599207c2f649c9879fbc8ae8f5992a90f115910160405180910390a35050600180555050505050565b6000546001600160a01b031633146121285760405162461bcd60e51b81526004016107cb90612b48565b6001600160a01b03811661218d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107cb565b61219681612250565b50565b600260015414156121bc5760405162461bcd60e51b81526004016107cb90612b7d565b60026001556000546001600160a01b031633146121eb5760405162461bcd60e51b81526004016107cb90612b48565b6121f4816124ed565b61220d336002546001600160a01b0316903084356124af565b5060018055565b600061068d8284612ce4565b600061068d8284612d19565b600061068d8284612c88565b600061068d8284612d2d565b600061068d8284612d41565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b336000908152600a602090815260408083208054825181850281018501909352808352919290919083018282801561230157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122e3575b505050505090506000805b825181101561236257836001600160a01b031683828151811061233157612331612c09565b60200260200101516001600160a01b0316141561235057809150612362565b8061235a81612b2d565b91505061230c565b5060018251111561240257816001835161237c9190612d41565b8151811061238c5761238c612c09565b6020026020010151600a600061239f3390565b6001600160a01b03166001600160a01b031681526020019081526020016000208260ff16815481106123d3576123d3612c09565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b336000908152600a6020526040902080548061242057612420612d58565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6040516001600160a01b0383166024820152604481018290526124aa90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261270b565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526124e79085906323b872dd60e01b90608401612473565b50505050565b6005546124fb90823561222c565b600555600754612515906001600160a01b03166001612cb9565b600780546001600160a01b0319166001600160a01b03929092169182179055604080516101608101825283820135815260608085013560208301526080808601359383019390935260a08501359082015290810161257960e0850160c08601612d6e565b1515815260e0840135602082015261010084013560408201526060016125a761014085016101208601612d6e565b1515815260006020808301829052604080840183905286356060948501526001600160a01b0386168352600980835281842086518155868401516001820155868301516002820155948601516003860155608086015160048601805491151560ff1992831617905560a0870151600587015560c0870151600687015560e0870151600787018054911515918316919091179055610100870151600887015561012087015191860180549215159290911691909117905561014090940151600a938401559192909161267c918601908601612930565b6001600160a01b039081168252602080830193909352604091820160009081208054600181018255908252908490200180546001600160a01b031916918516918217905581519081526060858101359382019390935260e085013581830152905133927fddd28da244a5f28bba9c56c573a5a3180278e2bb4b66b47bc9a14516b92d8ba3928290030190a25050565b6000612760826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127dd9092919063ffffffff16565b8051909150156124aa578080602001905181019061277e9190612d8b565b6124aa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107cb565b6060610920848460008585843b6128365760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107cb565b600080866001600160a01b031685876040516128529190612dd4565b60006040518083038185875af1925050503d806000811461288f576040519150601f19603f3d011682016040523d82523d6000602084013e612894565b606091505b50915091506128a48282866128af565b979650505050505050565b606083156128be57508161068d565b8251156128ce5782518084602001fd5b8160405162461bcd60e51b81526004016107cb9190612df0565b6000806000606084860312156128fd57600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b038116811461292b57600080fd5b919050565b60006020828403121561294257600080fd5b61068d82612914565b801515811461219657600080fd5b6000806000806080858703121561296f57600080fd5b843593506020850135925060408501359150606085013561298f8161294b565b939692955090935050565b6020808252825182820181905260009190848201906040850190845b818110156129db5783516001600160a01b0316835292840192918401916001016129b6565b50909695505050505050565b600080604083850312156129fa57600080fd5b612a0383612914565b946020939093013593505050565b60008060208385031215612a2457600080fd5b823567ffffffffffffffff80821115612a3c57600080fd5b818501915085601f830112612a5057600080fd5b813581811115612a5f57600080fd5b86602061014083028501011115612a7557600080fd5b60209290920196919550909350505050565b600080600060608486031215612a9c57600080fd5b833592506020840135612aae8161294b565b91506040840135612abe8161294b565b809150509250925092565b600080600060608486031215612ade57600080fd5b8335925060208401359150612af560408501612914565b90509250925092565b60006101408284031215612b1157600080fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612b4157612b41612b17565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526035908201527f5374616b696e674d61737465723a205374616b696e6720616464726573732063604082015274616e2774206265207468652030206164647265737360581b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415612c3657612c36612b17565b60010192915050565b60208082526029908201527f5374616b696e674d61737465723a205573657220646f65736e2774206f776e20604082015268746865207374616b6560b81b606082015260800190565b60008219821115612c9b57612c9b612b17565b500190565b600060208284031215612cb257600080fd5b5051919050565b60006001600160a01b03828116848216808303821115612cdb57612cdb612b17565b01949350505050565b6000816000190483118215151615612cfe57612cfe612b17565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612d2857612d28612d03565b500490565b600082612d3c57612d3c612d03565b500690565b600082821015612d5357612d53612b17565b500390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215612d8057600080fd5b813561068d8161294b565b600060208284031215612d9d57600080fd5b815161068d8161294b565b60005b83811015612dc3578181015183820152602001612dab565b838111156124e75750506000910152565b60008251612de6818460208701612da8565b9190910192915050565b6020815260008251806020840152612e0f816040850160208701612da8565b601f01601f1916919091016040019291505056fea264697066735822122071a5c4ef7692b55c2b0b889e5a3f9504ffc0faa58c67653fa9703fcfdbf0605064736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToStake(address,uint256)": {
        "details": "Adds to a user's pre-existing stake. This can only be triggered by the Provider Contract, i.e; when a user is re-investing their rewards from the Provider Contract.",
        "params": {
          "_amount": "The additional amount to stake",
          "_stakingAddress": "The address of the stake"
        }
      },
      "batchRecreateStake((uint256,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,bool)[])": {
        "details": "This function allows the recreation of multiple stakes",
        "params": {
          "recreateStakeArgs": "The array of arguments to recreate all the stakes"
        }
      },
      "claimRewards(address)": {
        "details": "Claim rewards for a given stake. This releases the allowed amount from the Vesting contract and also returns them pool rewards. This can only be called when a stake is complete and by the _recipient of the stake only.",
        "params": {
          "_stakingAddress": "The address of the stake"
        }
      },
      "closeStake(address)": {
        "details": "Close the given stake, this can only happen when a stake is incomplete and User wishes to close the stake early. This function calculates their penalised amount for withdrawing early and stores it in the StakingMaster contract as the pool reward. It then transfers their allowed amount back to the user.",
        "params": {
          "_stakingAddress": "The address of the stake"
        }
      },
      "createStaking(uint256,uint256,address)": {
        "details": "Creates a new stake for the user. It calculates their projected interest based on the parameters and stores it in a TokenVesting contract that vests their total amount over 2 weeks once their stake is complete. It also creates a struct containing all the relevant stake details.",
        "params": {
          "_amount": "The amount the user will be staking (in ether)",
          "_duration": "The duration of the stake (in months)",
          "_recipient": "The address of the user that will be receiving the stake rewards"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recreateStake((uint256,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,bool))": {
        "details": "This function allows the migration of a Stake contract from the previous StakingMaster",
        "params": {
          "recreateStakeArgs": "All the arguments required to recreate the stake"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "returnCurrentStakeValue(address)": {
        "details": "Returns the given stake value corresponding to the stake address",
        "returns": {
          "_0": "_stakingAddress The staking address to return the value for"
        }
      },
      "returnStakeState(address)": {
        "details": "Returns a given stakes state",
        "params": {
          "_stakingAddress": "The address of the stake"
        },
        "returns": {
          "compounding": "Whether the stake is compounding",
          "currentStakeValue": "The current value of the stake, including interest up until now",
          "interestRate": "The interest rate of the stake",
          "lastUpdate": "When the stake last had value added to it, or when it was created (if no additional value has been added to the stake)",
          "rawInvestedAmount": "The User's invested amount (excluding interest)",
          "stakeEndTime": "When the stake will finish",
          "stakeStartTime": "When the stake was created"
        }
      },
      "returnStakesClaimablePoolRewards(address)": {
        "details": "Returns a stakes claimable pool rewards",
        "params": {
          "_stakingAddress": "The stake to return the claimable pool rewards for"
        },
        "returns": {
          "_0": "The claimable pool reward amount"
        }
      },
      "returnStakesClaimableRewards(address)": {
        "details": "Returns a stakes claimable rewards, ",
        "params": {
          "_stakingAddress": "The stake to return the claimable rewards for"
        },
        "returns": {
          "_0": "The claimable amount"
        }
      },
      "returnUsersStakes(address)": {
        "details": "Returns a given user's stakes",
        "params": {
          "_user": "The user to return stakes for"
        },
        "returns": {
          "usersStakes": "An array containing the addreses of all the user's created stakes"
        }
      },
      "returnUsersTotalStakeValue(address)": {
        "details": "Returns a given user's total stake value across all the user's stakes, including all interest earnt up until now.",
        "params": {
          "_user": "The user to return the value for"
        },
        "returns": {
          "_0": "The users total stake value"
        }
      },
      "returnValidUsersProviderStake(address)": {
        "details": "Returns a user's staking address if the stake is in progress and was created by the provider contract. Function intended to be called by the provider contract when the user is claiming rewards and intending them to be sent to a Staking contract",
        "params": {
          "_user": "The user to return valid stakes for"
        },
        "returns": {
          "_0": "The valid stake address"
        }
      },
      "setProviderAddress(address)": {
        "details": "Allows the owner to set the provider address for checking if interactions are from the provider. Allow this to be overwritten in case of redeployments",
        "params": {
          "_providerAddress": "The contract address of the provider"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3877,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "auroxToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)767"
      },
      {
        "astId": 3879,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "providerAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3882,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "secondsPerMonth",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3885,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "investedTotal",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3887,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "epochStart",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3890,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "localCreationCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint160"
      },
      {
        "astId": 3893,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "poolRewardsTotal",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3898,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "staking",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Staking)3714_storage)"
      },
      {
        "astId": 3903,
        "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
        "label": "userInvestments",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)767": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Staking)3714_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakingMaster.Staking)",
        "numberOfBytes": "32",
        "value": "t_struct(Staking)3714_storage"
      },
      "t_struct(Staking)3714_storage": {
        "encoding": "inplace",
        "label": "struct IStakingMaster.Staking",
        "members": [
          {
            "astId": 3693,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "investedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3695,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "stakeEndTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3697,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "interestRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3699,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "lastUpdate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3701,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "compounded",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 3703,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "rawInvestedAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3705,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "stakeStartTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3707,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "providerStake",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 3709,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "released",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3711,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "poolRewardsClaimed",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 3713,
            "contract": "contracts/StakingMaster/StakingMaster.sol:StakingMaster",
            "label": "totalLocked",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}