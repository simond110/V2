/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RewardHelpersInterface extends ethers.utils.Interface {
  functions: {
    "_getSecondsToEpochEnd(uint256)": FunctionFragment;
    "_returnClaimSecondsForPulledLiquidity(uint256,uint256)": FunctionFragment;
    "_returnEpochClaimSeconds(uint256,uint256,uint256,uint256)": FunctionFragment;
    "_returnEpochToTimestamp(uint256)": FunctionFragment;
    "_returnRewardAmount(uint256,uint256,uint256,uint256)": FunctionFragment;
    "epochAmounts(uint256)": FunctionFragment;
    "lastEpochUpdate()": FunctionFragment;
    "returnCurrentAPY()": FunctionFragment;
    "returnCurrentEpoch()": FunctionFragment;
    "returnGivenEpochEndTime(uint256)": FunctionFragment;
    "returnGivenEpochStartTime(uint256)": FunctionFragment;
    "returnIfInFirstDayOfEpoch(uint256)": FunctionFragment;
    "returnTotalRewardForEpoch(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_getSecondsToEpochEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_returnClaimSecondsForPulledLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_returnEpochClaimSeconds",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_returnEpochToTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_returnRewardAmount",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochAmounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnCurrentAPY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnGivenEpochEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnGivenEpochStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnIfInFirstDayOfEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnTotalRewardForEpoch",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getSecondsToEpochEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_returnClaimSecondsForPulledLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_returnEpochClaimSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_returnEpochToTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_returnRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnCurrentAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnGivenEpochEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnGivenEpochStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnIfInFirstDayOfEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnTotalRewardForEpoch",
    data: BytesLike
  ): Result;

  events: {};
}

export class RewardHelpers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardHelpersInterface;

  functions: {
    _getSecondsToEpochEnd(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _returnClaimSecondsForPulledLiquidity(
      lastClaimedTimestamp: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _returnEpochClaimSeconds(
      epoch: BigNumberish,
      currentEpoch: BigNumberish,
      lastEpochClaimed: BigNumberish,
      lastClaimedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _returnEpochToTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _returnRewardAmount(
      usersInvestmentTotal: BigNumberish,
      overallInvestmentTotal: BigNumberish,
      secondsToClaim: BigNumberish,
      totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        shareTotal: BigNumber;
        allPrevInvestmentTotals: BigNumber;
        currentInvestmentTotal: BigNumber;
        withdrewLiquidity: boolean;
      }
    >;

    lastEpochUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    returnCurrentAPY(overrides?: CallOverrides): Promise<[BigNumber]>;

    returnCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    returnGivenEpochEndTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    returnGivenEpochStartTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    returnIfInFirstDayOfEpoch(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    returnTotalRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  _getSecondsToEpochEnd(
    currentEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _returnClaimSecondsForPulledLiquidity(
    lastClaimedTimestamp: BigNumberish,
    currentEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _returnEpochClaimSeconds(
    epoch: BigNumberish,
    currentEpoch: BigNumberish,
    lastEpochClaimed: BigNumberish,
    lastClaimedTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _returnEpochToTimestamp(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _returnRewardAmount(
    usersInvestmentTotal: BigNumberish,
    overallInvestmentTotal: BigNumberish,
    secondsToClaim: BigNumberish,
    totalReward: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochAmounts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      shareTotal: BigNumber;
      allPrevInvestmentTotals: BigNumber;
      currentInvestmentTotal: BigNumber;
      withdrewLiquidity: boolean;
    }
  >;

  lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  returnCurrentAPY(overrides?: CallOverrides): Promise<BigNumber>;

  returnCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  returnGivenEpochEndTime(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  returnGivenEpochStartTime(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  returnIfInFirstDayOfEpoch(
    currentEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  returnTotalRewardForEpoch(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _getSecondsToEpochEnd(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnClaimSecondsForPulledLiquidity(
      lastClaimedTimestamp: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnEpochClaimSeconds(
      epoch: BigNumberish,
      currentEpoch: BigNumberish,
      lastEpochClaimed: BigNumberish,
      lastClaimedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnEpochToTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnRewardAmount(
      usersInvestmentTotal: BigNumberish,
      overallInvestmentTotal: BigNumberish,
      secondsToClaim: BigNumberish,
      totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        shareTotal: BigNumber;
        allPrevInvestmentTotals: BigNumber;
        currentInvestmentTotal: BigNumber;
        withdrewLiquidity: boolean;
      }
    >;

    lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    returnCurrentAPY(overrides?: CallOverrides): Promise<BigNumber>;

    returnCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    returnGivenEpochEndTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnGivenEpochStartTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnIfInFirstDayOfEpoch(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    returnTotalRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _getSecondsToEpochEnd(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnClaimSecondsForPulledLiquidity(
      lastClaimedTimestamp: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnEpochClaimSeconds(
      epoch: BigNumberish,
      currentEpoch: BigNumberish,
      lastEpochClaimed: BigNumberish,
      lastClaimedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnEpochToTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnRewardAmount(
      usersInvestmentTotal: BigNumberish,
      overallInvestmentTotal: BigNumberish,
      secondsToClaim: BigNumberish,
      totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    returnCurrentAPY(overrides?: CallOverrides): Promise<BigNumber>;

    returnCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    returnGivenEpochEndTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnGivenEpochStartTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnIfInFirstDayOfEpoch(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnTotalRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getSecondsToEpochEnd(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _returnClaimSecondsForPulledLiquidity(
      lastClaimedTimestamp: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _returnEpochClaimSeconds(
      epoch: BigNumberish,
      currentEpoch: BigNumberish,
      lastEpochClaimed: BigNumberish,
      lastClaimedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _returnEpochToTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _returnRewardAmount(
      usersInvestmentTotal: BigNumberish,
      overallInvestmentTotal: BigNumberish,
      secondsToClaim: BigNumberish,
      totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnCurrentAPY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnCurrentEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnGivenEpochEndTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnGivenEpochStartTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnIfInFirstDayOfEpoch(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnTotalRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
