/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ProviderInterface extends ethers.utils.Interface {
  functions: {
    "_getSecondsToEpochEnd(uint256)": FunctionFragment;
    "_returnClaimSecondsForPulledLiquidity(uint256,uint256)": FunctionFragment;
    "_returnEpochClaimSeconds(uint256,uint256,uint256,uint256)": FunctionFragment;
    "_returnEpochToTimestamp(uint256)": FunctionFragment;
    "_returnRewardAmount(uint256,uint256,uint256,uint256)": FunctionFragment;
    "addLiquidity(uint256)": FunctionFragment;
    "claimRewards(bool,uint256)": FunctionFragment;
    "epochAmounts(uint256)": FunctionFragment;
    "lastEpochUpdate()": FunctionFragment;
    "migrateUsersLPPositions((address,uint256,uint256)[])": FunctionFragment;
    "migrationContractAddress()": FunctionFragment;
    "removeLiquidity(uint256)": FunctionFragment;
    "returnAllClaimableRewardAmounts(address)": FunctionFragment;
    "returnCurrentAPY()": FunctionFragment;
    "returnCurrentEpoch()": FunctionFragment;
    "returnEpochShare(uint256,uint256)": FunctionFragment;
    "returnGivenEpochEndTime(uint256)": FunctionFragment;
    "returnGivenEpochStartTime(uint256)": FunctionFragment;
    "returnIfInFirstDayOfEpoch(uint256)": FunctionFragment;
    "returnTotalRewardForEpoch(uint256)": FunctionFragment;
    "returnUsersEpochTotals(uint256,address)": FunctionFragment;
    "returnUsersInvestmentTotal(address)": FunctionFragment;
    "userInvestments(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_getSecondsToEpochEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_returnClaimSecondsForPulledLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_returnEpochClaimSeconds",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_returnEpochToTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_returnRewardAmount",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochAmounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateUsersLPPositions",
    values: [
      {
        _user: string;
        _amount: BigNumberish;
        _bonusRewardMultiplier: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrationContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnAllClaimableRewardAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnCurrentAPY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnEpochShare",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnGivenEpochEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnGivenEpochStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnIfInFirstDayOfEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnTotalRewardForEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnUsersEpochTotals",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnUsersInvestmentTotal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInvestments",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getSecondsToEpochEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_returnClaimSecondsForPulledLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_returnEpochClaimSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_returnEpochToTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_returnRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateUsersLPPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnAllClaimableRewardAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnCurrentAPY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnEpochShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnGivenEpochEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnGivenEpochStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnIfInFirstDayOfEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnTotalRewardForEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnUsersEpochTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnUsersInvestmentTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInvestments",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity(address,uint256)": EventFragment;
    "ClaimRewards(address,uint256,bool)": EventFragment;
    "RemoveLiquidity(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
}

export type AddLiquidityEvent = TypedEvent<
  [string, BigNumber] & { _from: string; _amount: BigNumber }
>;

export type ClaimRewardsEvent = TypedEvent<
  [string, BigNumber, boolean] & {
    _from: string;
    _amount: BigNumber;
    _sendRewardsToStaking: boolean;
  }
>;

export type RemoveLiquidityEvent = TypedEvent<
  [string, BigNumber] & { _from: string; _amount: BigNumber }
>;

export class Provider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProviderInterface;

  functions: {
    _getSecondsToEpochEnd(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _returnClaimSecondsForPulledLiquidity(
      lastClaimedTimestamp: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _returnEpochClaimSeconds(
      epoch: BigNumberish,
      currentEpoch: BigNumberish,
      lastEpochClaimed: BigNumberish,
      lastClaimedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _returnEpochToTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _returnRewardAmount(
      usersInvestmentTotal: BigNumberish,
      overallInvestmentTotal: BigNumberish,
      secondsToClaim: BigNumberish,
      totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      _sendRewardsToStaking: boolean,
      stakeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        shareTotal: BigNumber;
        allPrevInvestmentTotals: BigNumber;
        currentInvestmentTotal: BigNumber;
        withdrewLiquidity: boolean;
      }
    >;

    lastEpochUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateUsersLPPositions(
      allMigrateArgs: {
        _user: string;
        _amount: BigNumberish;
        _bonusRewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrationContractAddress(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnAllClaimableRewardAmounts(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewardTotal: BigNumber;
        lastLiquidityAddedEpochReference: BigNumber;
        lastEpochLiquidityWithdrawn: BigNumber;
      }
    >;

    returnCurrentAPY(overrides?: CallOverrides): Promise<[BigNumber]>;

    returnCurrentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    returnEpochShare(
      _amount: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnGivenEpochEndTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    returnGivenEpochStartTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    returnIfInFirstDayOfEpoch(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    returnTotalRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    returnUsersEpochTotals(
      epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shareTotal: BigNumber;
        currentInvestmentTotal: BigNumber;
        allPrevInvestmentTotals: BigNumber;
      }
    >;

    returnUsersInvestmentTotal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userInvestments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastLiquidityAddedEpochReference: BigNumber;
        lastEpochUpdate: BigNumber;
        lastClaimedTimestamp: BigNumber;
        lastEpochLiquidityWithdrawn: BigNumber;
        bonusRewardMultiplier: BigNumber;
      }
    >;
  };

  _getSecondsToEpochEnd(
    currentEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _returnClaimSecondsForPulledLiquidity(
    lastClaimedTimestamp: BigNumberish,
    currentEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _returnEpochClaimSeconds(
    epoch: BigNumberish,
    currentEpoch: BigNumberish,
    lastEpochClaimed: BigNumberish,
    lastClaimedTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _returnEpochToTimestamp(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _returnRewardAmount(
    usersInvestmentTotal: BigNumberish,
    overallInvestmentTotal: BigNumberish,
    secondsToClaim: BigNumberish,
    totalReward: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addLiquidity(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    _sendRewardsToStaking: boolean,
    stakeDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochAmounts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      shareTotal: BigNumber;
      allPrevInvestmentTotals: BigNumber;
      currentInvestmentTotal: BigNumber;
      withdrewLiquidity: boolean;
    }
  >;

  lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  migrateUsersLPPositions(
    allMigrateArgs: {
      _user: string;
      _amount: BigNumberish;
      _bonusRewardMultiplier: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrationContractAddress(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnAllClaimableRewardAmounts(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rewardTotal: BigNumber;
      lastLiquidityAddedEpochReference: BigNumber;
      lastEpochLiquidityWithdrawn: BigNumber;
    }
  >;

  returnCurrentAPY(overrides?: CallOverrides): Promise<BigNumber>;

  returnCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  returnEpochShare(
    _amount: BigNumberish,
    currentEpoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnGivenEpochEndTime(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  returnGivenEpochStartTime(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  returnIfInFirstDayOfEpoch(
    currentEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  returnTotalRewardForEpoch(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  returnUsersEpochTotals(
    epoch: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      shareTotal: BigNumber;
      currentInvestmentTotal: BigNumber;
      allPrevInvestmentTotals: BigNumber;
    }
  >;

  returnUsersInvestmentTotal(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userInvestments(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastLiquidityAddedEpochReference: BigNumber;
      lastEpochUpdate: BigNumber;
      lastClaimedTimestamp: BigNumber;
      lastEpochLiquidityWithdrawn: BigNumber;
      bonusRewardMultiplier: BigNumber;
    }
  >;

  callStatic: {
    _getSecondsToEpochEnd(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnClaimSecondsForPulledLiquidity(
      lastClaimedTimestamp: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnEpochClaimSeconds(
      epoch: BigNumberish,
      currentEpoch: BigNumberish,
      lastEpochClaimed: BigNumberish,
      lastClaimedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnEpochToTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnRewardAmount(
      usersInvestmentTotal: BigNumberish,
      overallInvestmentTotal: BigNumberish,
      secondsToClaim: BigNumberish,
      totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      _sendRewardsToStaking: boolean,
      stakeDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    epochAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        shareTotal: BigNumber;
        allPrevInvestmentTotals: BigNumber;
        currentInvestmentTotal: BigNumber;
        withdrewLiquidity: boolean;
      }
    >;

    lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    migrateUsersLPPositions(
      allMigrateArgs: {
        _user: string;
        _amount: BigNumberish;
        _bonusRewardMultiplier: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    migrationContractAddress(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    returnAllClaimableRewardAmounts(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewardTotal: BigNumber;
        lastLiquidityAddedEpochReference: BigNumber;
        lastEpochLiquidityWithdrawn: BigNumber;
      }
    >;

    returnCurrentAPY(overrides?: CallOverrides): Promise<BigNumber>;

    returnCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    returnEpochShare(
      _amount: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnGivenEpochEndTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnGivenEpochStartTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnIfInFirstDayOfEpoch(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    returnTotalRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnUsersEpochTotals(
      epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shareTotal: BigNumber;
        currentInvestmentTotal: BigNumber;
        allPrevInvestmentTotals: BigNumber;
      }
    >;

    returnUsersInvestmentTotal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInvestments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastLiquidityAddedEpochReference: BigNumber;
        lastEpochUpdate: BigNumber;
        lastClaimedTimestamp: BigNumber;
        lastEpochLiquidityWithdrawn: BigNumber;
        bonusRewardMultiplier: BigNumber;
      }
    >;
  };

  filters: {
    "AddLiquidity(address,uint256)"(
      _from?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _from: string; _amount: BigNumber }
    >;

    AddLiquidity(
      _from?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _from: string; _amount: BigNumber }
    >;

    "ClaimRewards(address,uint256,bool)"(
      _from?: string | null,
      _amount?: null,
      _sendRewardsToStaking?: boolean | null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { _from: string; _amount: BigNumber; _sendRewardsToStaking: boolean }
    >;

    ClaimRewards(
      _from?: string | null,
      _amount?: null,
      _sendRewardsToStaking?: boolean | null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { _from: string; _amount: BigNumber; _sendRewardsToStaking: boolean }
    >;

    "RemoveLiquidity(address,uint256)"(
      _from?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _from: string; _amount: BigNumber }
    >;

    RemoveLiquidity(
      _from?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _from: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    _getSecondsToEpochEnd(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnClaimSecondsForPulledLiquidity(
      lastClaimedTimestamp: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnEpochClaimSeconds(
      epoch: BigNumberish,
      currentEpoch: BigNumberish,
      lastEpochClaimed: BigNumberish,
      lastClaimedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnEpochToTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _returnRewardAmount(
      usersInvestmentTotal: BigNumberish,
      overallInvestmentTotal: BigNumberish,
      secondsToClaim: BigNumberish,
      totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      _sendRewardsToStaking: boolean,
      stakeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    migrateUsersLPPositions(
      allMigrateArgs: {
        _user: string;
        _amount: BigNumberish;
        _bonusRewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrationContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnAllClaimableRewardAmounts(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnCurrentAPY(overrides?: CallOverrides): Promise<BigNumber>;

    returnCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    returnEpochShare(
      _amount: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnGivenEpochEndTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnGivenEpochStartTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnIfInFirstDayOfEpoch(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnTotalRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnUsersEpochTotals(
      epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnUsersInvestmentTotal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInvestments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getSecondsToEpochEnd(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _returnClaimSecondsForPulledLiquidity(
      lastClaimedTimestamp: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _returnEpochClaimSeconds(
      epoch: BigNumberish,
      currentEpoch: BigNumberish,
      lastEpochClaimed: BigNumberish,
      lastClaimedTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _returnEpochToTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _returnRewardAmount(
      usersInvestmentTotal: BigNumberish,
      overallInvestmentTotal: BigNumberish,
      secondsToClaim: BigNumberish,
      totalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _sendRewardsToStaking: boolean,
      stakeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateUsersLPPositions(
      allMigrateArgs: {
        _user: string;
        _amount: BigNumberish;
        _bonusRewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrationContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnAllClaimableRewardAmounts(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnCurrentAPY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnCurrentEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnEpochShare(
      _amount: BigNumberish,
      currentEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnGivenEpochEndTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnGivenEpochStartTime(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnIfInFirstDayOfEpoch(
      currentEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnTotalRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnUsersEpochTotals(
      epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnUsersInvestmentTotal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInvestments(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
