/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IProviderInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(uint256)": FunctionFragment;
    "claimRewards(bool,uint256)": FunctionFragment;
    "migrateUsersLPPositions((address,uint256,uint256)[])": FunctionFragment;
    "removeLiquidity(uint256)": FunctionFragment;
    "returnAllClaimableRewardAmounts(address)": FunctionFragment;
    "returnUsersEpochTotals(uint256,address)": FunctionFragment;
    "returnUsersInvestmentTotal(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateUsersLPPositions",
    values: [
      {
        _user: string;
        _amount: BigNumberish;
        _bonusRewardMultiplier: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnAllClaimableRewardAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnUsersEpochTotals",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "returnUsersInvestmentTotal",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateUsersLPPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnAllClaimableRewardAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnUsersEpochTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnUsersInvestmentTotal",
    data: BytesLike
  ): Result;

  events: {};
}

export class IProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IProviderInterface;

  functions: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      _sendRewardsToStaking: boolean,
      stakeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateUsersLPPositions(
      allMigrateArgs: {
        _user: string;
        _amount: BigNumberish;
        _bonusRewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnAllClaimableRewardAmounts(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewardTotal: BigNumber;
        lastLiquidityAddedEpochReference: BigNumber;
        lastEpochLiquidityWithdrawn: BigNumber;
      }
    >;

    returnUsersEpochTotals(
      epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shareTotal: BigNumber;
        currentInvestmentTotal: BigNumber;
        allPrevInvestmentTotals: BigNumber;
      }
    >;

    returnUsersInvestmentTotal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addLiquidity(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    _sendRewardsToStaking: boolean,
    stakeDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateUsersLPPositions(
    allMigrateArgs: {
      _user: string;
      _amount: BigNumberish;
      _bonusRewardMultiplier: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnAllClaimableRewardAmounts(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rewardTotal: BigNumber;
      lastLiquidityAddedEpochReference: BigNumber;
      lastEpochLiquidityWithdrawn: BigNumber;
    }
  >;

  returnUsersEpochTotals(
    epoch: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      shareTotal: BigNumber;
      currentInvestmentTotal: BigNumber;
      allPrevInvestmentTotals: BigNumber;
    }
  >;

  returnUsersInvestmentTotal(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      _sendRewardsToStaking: boolean,
      stakeDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateUsersLPPositions(
      allMigrateArgs: {
        _user: string;
        _amount: BigNumberish;
        _bonusRewardMultiplier: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    returnAllClaimableRewardAmounts(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewardTotal: BigNumber;
        lastLiquidityAddedEpochReference: BigNumber;
        lastEpochLiquidityWithdrawn: BigNumber;
      }
    >;

    returnUsersEpochTotals(
      epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shareTotal: BigNumber;
        currentInvestmentTotal: BigNumber;
        allPrevInvestmentTotals: BigNumber;
      }
    >;

    returnUsersInvestmentTotal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewards(
      _sendRewardsToStaking: boolean,
      stakeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateUsersLPPositions(
      allMigrateArgs: {
        _user: string;
        _amount: BigNumberish;
        _bonusRewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnAllClaimableRewardAmounts(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnUsersEpochTotals(
      epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnUsersInvestmentTotal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _sendRewardsToStaking: boolean,
      stakeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateUsersLPPositions(
      allMigrateArgs: {
        _user: string;
        _amount: BigNumberish;
        _bonusRewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnAllClaimableRewardAmounts(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnUsersEpochTotals(
      epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnUsersInvestmentTotal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
