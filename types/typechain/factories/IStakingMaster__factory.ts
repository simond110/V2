/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IStakingMaster,
  IStakingMasterInterface,
} from "../IStakingMaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "addToStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "_balance",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "_recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "_investedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_stakeEndTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_interestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_lastUpdate",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "_compounded",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "_rawInvestedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_stakeStartTime",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "_providerStake",
            type: "bool",
          },
        ],
        internalType: "struct IStakingMaster.RecreateStakeArgs[]",
        name: "recreateStakeArgs",
        type: "tuple[]",
      },
    ],
    name: "batchRecreateStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingAddress",
        type: "address",
      },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingAddress",
        type: "address",
      },
    ],
    name: "closeStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
    ],
    name: "createStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "_balance",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "_recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "_investedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_stakeEndTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_interestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_lastUpdate",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "_compounded",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "_rawInvestedAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "_stakeStartTime",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "_providerStake",
            type: "bool",
          },
        ],
        internalType: "struct IStakingMaster.RecreateStakeArgs",
        name: "recreateStakeArgs",
        type: "tuple",
      },
    ],
    name: "recreateStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingAddress",
        type: "address",
      },
    ],
    name: "returnCurrentStakeValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingAddress",
        type: "address",
      },
    ],
    name: "returnStakeState",
    outputs: [
      {
        internalType: "uint256",
        name: "currentStakeValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakeEndTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastUpdate",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "compounding",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "rawInvestedAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakeStartTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingAddress",
        type: "address",
      },
    ],
    name: "returnStakesClaimablePoolRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingAddress",
        type: "address",
      },
    ],
    name: "returnStakesClaimableRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "returnUsersStakes",
    outputs: [
      {
        internalType: "address[]",
        name: "usersStakes",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "returnUsersTotalStakeValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "returnValidUsersProviderStake",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IStakingMaster__factory {
  static readonly abi = _abi;
  static createInterface(): IStakingMasterInterface {
    return new utils.Interface(_abi) as IStakingMasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IStakingMaster {
    return new Contract(address, _abi, signerOrProvider) as IStakingMaster;
  }
}
