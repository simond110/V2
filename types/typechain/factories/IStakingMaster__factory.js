"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
exports.__esModule = true;
exports.IStakingMaster__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_stakingAddress",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "_amount",
                type: "uint256"
            },
        ],
        name: "addToStake",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_stakingAddress",
                type: "address"
            },
        ],
        name: "claimRewards",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_stakingAddress",
                type: "address"
            },
        ],
        name: "closeStake",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_amount",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "_duration",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "_recipient",
                type: "address"
            },
        ],
        name: "createStaking",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_stakingAddress",
                type: "address"
            },
        ],
        name: "returnCurrentStakeValue",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            },
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_stakingAddress",
                type: "address"
            },
        ],
        name: "returnStakeState",
        outputs: [
            {
                internalType: "uint256",
                name: "currentStakeValue",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "stakeEndTime",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "interestRate",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "lastUpdate",
                type: "uint256"
            },
            {
                internalType: "bool",
                name: "compounding",
                type: "bool"
            },
            {
                internalType: "uint256",
                name: "rawInvestedAmount",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "stakeStartTime",
                type: "uint256"
            },
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_stakingAddress",
                type: "address"
            },
        ],
        name: "returnStakesClaimablePoolRewards",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            },
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_stakingAddress",
                type: "address"
            },
        ],
        name: "returnStakesClaimableRewards",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            },
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_user",
                type: "address"
            },
        ],
        name: "returnUsersStakes",
        outputs: [
            {
                internalType: "address[]",
                name: "usersStakes",
                type: "address[]"
            },
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_user",
                type: "address"
            },
        ],
        name: "returnUsersTotalStakeValue",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            },
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_user",
                type: "address"
            },
        ],
        name: "returnValidUsersProviderStake",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            },
        ],
        stateMutability: "view",
        type: "function"
    },
];
var IStakingMaster__factory = /** @class */ (function () {
    function IStakingMaster__factory() {
    }
    IStakingMaster__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    IStakingMaster__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    IStakingMaster__factory.abi = _abi;
    return IStakingMaster__factory;
}());
exports.IStakingMaster__factory = IStakingMaster__factory;
