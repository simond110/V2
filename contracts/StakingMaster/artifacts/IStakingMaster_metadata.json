{
	"compiler": {
		"version": "0.7.4+commit.3f05b770"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakingAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "addToStake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakingAddress",
						"type": "address"
					}
				],
				"name": "claimRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakingAddress",
						"type": "address"
					}
				],
				"name": "closeStake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_duration",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					}
				],
				"name": "createStaking",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakingAddress",
						"type": "address"
					}
				],
				"name": "returnCurrentStakeValue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakingAddress",
						"type": "address"
					}
				],
				"name": "returnStakeState",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "currentStakeValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stakeEndTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lastUpdate",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "compounding",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "rawInvestedAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stakeStartTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakingAddress",
						"type": "address"
					}
				],
				"name": "returnStakesClaimablePoolRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakingAddress",
						"type": "address"
					}
				],
				"name": "returnStakesClaimableRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "returnUsersStakes",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "usersStakes",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "returnUsersTotalStakeValue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "returnValidUsersProviderStake",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addToStake(address,uint256)": {
					"details": "Adds to a user's pre-existing stake. This can only be triggered by the Provider Contract, i.e; when a user is re-investing their rewards from the Provider Contract.",
					"params": {
						"_amount": "The additional amount to stake",
						"_stakingAddress": "The address of the stake"
					}
				},
				"claimRewards(address)": {
					"details": "Claim rewards for a given stake. This releases the allowed amount from the Vesting contract and also returns them pool rewards. This can only be called when a stake is complete and by the _recipient of the stake only.",
					"params": {
						"_stakingAddress": "The address of the stake"
					}
				},
				"closeStake(address)": {
					"details": "Close the given stake, this can only happen when a stake is incomplete and User wishes to close the stake early. This function calculates their penalised amount for withdrawing early and stores it in the StakingMaster contract as the pool reward. It then transfers their allowed amount back to the user.",
					"params": {
						"_stakingAddress": "The address of the stake"
					}
				},
				"createStaking(uint256,uint256,address)": {
					"details": "Creates a new stake for the user. It calculates their projected interest based on the parameters and stores it in a TokenVesting contract that vests their total amount over 2 weeks once their stake is complete. It also creates a struct containing all the relevant stake details.",
					"params": {
						"_amount": "The amount the user will be staking (in ether)",
						"_duration": "The duration of the stake (in months)",
						"_recipient": "The address of the user that will be receiving the stake rewards"
					}
				},
				"returnCurrentStakeValue(address)": {
					"details": "Returns the given stake value corresponding to the stake address",
					"returns": {
						"_0": "_stakingAddress The staking address to return the value for"
					}
				},
				"returnStakeState(address)": {
					"details": "Returns a given stakes state",
					"params": {
						"_stakingAddress": "The address of the stake"
					},
					"returns": {
						"compounding": "Whether the stake is compounding",
						"currentStakeValue": "The current value of the stake, including interest up until now",
						"interestRate": "The interest rate of the stake",
						"lastUpdate": "When the stake last had value added to it, or when it was created (if no additional value has been added to the stake)",
						"rawInvestedAmount": "The User's invested amount (excluding interest)",
						"stakeEndTime": "When the stake will finish",
						"stakeStartTime": "When the stake was created"
					}
				},
				"returnStakesClaimablePoolRewards(address)": {
					"details": "Returns a stakes claimable pool rewards",
					"params": {
						"_stakingAddress": "The stake to return the claimable pool rewards for"
					},
					"returns": {
						"_0": "The claimable pool reward amount"
					}
				},
				"returnStakesClaimableRewards(address)": {
					"details": "Returns a stakes claimable rewards, ",
					"params": {
						"_stakingAddress": "The stake to return the claimable rewards for"
					},
					"returns": {
						"_0": "The claimable amount"
					}
				},
				"returnUsersStakes(address)": {
					"details": "Returns a given user's stakes",
					"params": {
						"_user": "The user to return stakes for"
					},
					"returns": {
						"usersStakes": "An array containing the addreses of all the user's created stakes"
					}
				},
				"returnUsersTotalStakeValue(address)": {
					"details": "Returns a given user's total stake value across all the user's stakes, including all interest earnt up until now.",
					"params": {
						"_user": "The user to return the value for"
					},
					"returns": {
						"_0": "The users total stake value"
					}
				},
				"returnValidUsersProviderStake(address)": {
					"details": "Returns a user's staking address if the stake is in progress and was created by the provider contract. Function intended to be called by the provider contract when the user is claiming rewards and intending them to be sent to a Staking contract",
					"params": {
						"_user": "The user to return valid stakes for"
					},
					"returns": {
						"_0": "The valid stake address"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/contracts/StakingMaster/IStakingMaster.sol": "IStakingMaster"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/contracts/StakingMaster/IStakingMaster.sol": {
			"keccak256": "0x4592d0d3dd63d2aeaad43ff9ae5775a7a0d34a72454e9ee75c93cefd0afa57cf",
			"urls": [
				"bzz-raw://5c4f97c85853d864690dd9e202d70422cae4d8b6274c45f43448b5feb6d72543",
				"dweb:/ipfs/QmW2S5oQcVqncUTYQTqymzEzXhUQa3Z6TWajTGSy2CR69Y"
			]
		},
		"localhost/contracts/Vesting/TokenVesting.sol": {
			"keccak256": "0xb7e152dd2bfc264b2cae3fa6ea8e976299b9a6c23a651510d5d9de3e409e216a",
			"urls": [
				"bzz-raw://ea665fc9b26226cf5b9363e596acf0fb0fc7ae88555f85c8654f65236e7cda37",
				"dweb:/ipfs/QmcTFP6LpC37pqcy1G4txdKzxJrfKaFnhQCM17EgtsaEwv"
			]
		},
		"openzeppelin-solidity/contracts/GSN/Context.sol": {
			"keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0",
			"license": "MIT",
			"urls": [
				"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f",
				"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"
			]
		},
		"openzeppelin-solidity/contracts/access/Ownable.sol": {
			"keccak256": "0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa",
			"license": "MIT",
			"urls": [
				"bzz-raw://cb57a28e189cd8b05748db44bdd51d608e6f1364dd1b35ad921e1bc82c10631e",
				"dweb:/ipfs/QmaWWTBbVu2pRR9XUbE4iC159NoP59cRF9ZJwhf4ghFN9i"
			]
		},
		"openzeppelin-solidity/contracts/math/SafeMath.sol": {
			"keccak256": "0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6",
			"license": "MIT",
			"urls": [
				"bzz-raw://7f8d45329fecbf0836ad7543330c3ecd0f8d0ffa42d4016278c3eb2215fdcdfe",
				"dweb:/ipfs/QmXWLT7GcnHtA5NiD6MFi2CV3EWJY4wv5mLNnypqYDrxL3"
			]
		},
		"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5",
			"license": "MIT",
			"urls": [
				"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08",
				"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC"
			]
		},
		"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol": {
			"keccak256": "0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3a849c2d95e85463909e5b5c920b13e7a11216ca14127085e16d22b9379d52a",
				"dweb:/ipfs/QmUg3CZDbCCcQdroEpexBy5ZFd5vD1UWijWQq9qHZjtJNQ"
			]
		},
		"openzeppelin-solidity/contracts/utils/Address.sol": {
			"keccak256": "0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8",
			"license": "MIT",
			"urls": [
				"bzz-raw://7c119bcaecfa853d564ac88d312777f75fa1126a3bca88a3371adb0ad9f35cb0",
				"dweb:/ipfs/QmY9UPuXeSKq86Zh38fE43VGQPhKMN34mkuFSFqPcr6nvZ"
			]
		},
		"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61",
			"license": "MIT",
			"urls": [
				"bzz-raw://b95e56c1640d0ef789fc5c16269e141e992f6c8ac97cc6d377bd3825e9cab182",
				"dweb:/ipfs/QmVzaxJZY51EhagrcNnkxoU6Uq17RhATe7aHvtkC6wUkgK"
			]
		}
	},
	"version": 1
}